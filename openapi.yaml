openapi: 0.1.x
info:
  title: Fake Simple JSON Datasource API
  description: something like grafana simple json datasource
    https://github.com/monster5475/FakeSimpleJson
  version: "1.0"
paths:
  /:
    get:
      summary: "Test connection"
      description: Used for "Test connection" on the datasource config page
      operationId: api.endpoints.datasource_health
      tags:
        - Health Check
      responses:
        "200":
          description: Positive health check
  /query:
    post:
      summary: Query
      description: Returns metrics data
      operationId: api.endpoints.query
      tags:
        - Visualization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                panelId:
                  oneOf:
                    - type: string
                      example: Q-1599986187842-0.164611811105138-0
                    - type: number
                      example: 1
                range:
                  type: object
                  properties:
                    from:
                      type: string
                      format: date-time
                    to:
                      type: string
                      format: date-time
                    raw:
                      $ref: "#/components/schemas/raw-time-frame"
                rangeRaw:
                  $ref: "#/components/schemas/raw-time-frame"
                interval:
                  type: string
                  example: 30s
                intervalMs:
                  type: number
                  example: 5500
                maxDataPoints:
                  type: number
                  example: 50
                targets:
                  type: array
                  items:
                    type: object
                    required: [target]
                    properties:
                      target:
                        type: string
                        example: "upper_25"
                      refId:
                        type: string
                      payload:
                        description: arbitrary "additional data" the user can pass in
                        type: object
                scopedVars:
                  type: object
                  example:
                    __interval: { "text": "1s", "value": "1s" }
                    __interval_ms: { "text": 1000, "value": 1000 }
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: City
                      operator:
                        type: string
                        example: "="
                      value:
                        type: string
                        example: Berlin
      responses:
        "200":
          description: "Can be a 'timeseries' or 'table' response"
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - type: object
                      description: timeseries case
                      required: ["target", "datapoints"]
                      properties:
                        target:
                          type: string
                          example: "upper_25"
                        datapoints:
                          type: array
                          example: [[2.5, 1557385723416], [3.5, 1557385731634]]
                          items:
                            type: array
                            description: First value is Metric value as a float.
                              Second values is unix timestamp in milliseconds
                            minItems: 2
                            maxItems: 2
                            items:
                              type: number
                    - type: object
                      description: table case
                      required: ["type", "columns", "rows"]
                      properties:
                        type:
                          type: string
                          enum: ["table"]
                        columns:
                          type: array
                          items:
                            type: object
                            required: ["text"]
                            example:
                              - { "text": "Time", "type": "time" }
                              - { "text": "Country", "type": "string" }
                              - { "text": "Value", "type": "number" }
                            properties:
                              text:
                                type: string
                              type:
                                type: string
                        rows:
                          type: array
                          example:
                            [
                              [1557385723416, "SE", 123],
                              [1557385731634, "SE", 456],
                            ]
                          items:
                            anyOf:
                              - type: string
                              - type: number
  /search:
    post:
      summary: Search
      description: Returns data for Search of type `Query`
      operationId: api.endpoints.search
      tags:
        - Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  required: ["target"]
                  properties:
                    target:
                      type: string
                    variables:
                      type: object
                range:
                  type: object
                  properties:
                    from:
                      type: string
                      format: date-time
                    to:
                      type: string
                      format: date-time
                    raw:
                      $ref: "#/components/schemas/raw-time-frame"
      responses:
        "200":
          description: "Search items"
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      type: object
                      required: ["text", "value"]
                      properties:
                        __text:
                          type: string
                        __value:
                          type: string
                  - $ref: "#/components/schemas/dataframe"
  /tag-keys:
    post:
      summary: Keys for ad hoc filters
      description: returns possible keys for ad hoc filters
      operationId: api.endpoints.tag_keys
      tags:
        - Ad Hoc Filters
      responses:
        "200":
          description: List of ad hoc filter keys
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    text:
                      type: string
                example:
                  - { "type": "string", "text": "City" }
                  - { "type": "string", "text": "Country" }
  /tag-values:
    post:
      summary: Values for ad hoc filters
      description: returns possible values for ad hoc filters
      operationId: api.endpoints.tag_values
      tags:
        - Ad Hoc Filters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [key]
              properties:
                key:
                  type: string
      responses:
        "200":
          description: A valid response
components:
  schemas:
    dataframe:
      title: Dataframe
      type: object
      required: [fields]
      properties:
        fields:
          type: array
          items:
            required: [name, values]
            type: object
            properties:
              name:
                type: string
              values:
                type: array
                items: {}
    raw-time-frame:
      type: object
      properties:
        from:
          type: string
          example: now-1h
        to:
          type: string
          example: now
